{"version":3,"sources":["features/d3-tree/components/Canvas/Canvas.tsx","features/d3-tree/components/Cluster/Cluster.tsx","features/d3-tree/components/Cluster/Cluster-d3.ts","hooks/useSearch.ts","hooks/useSelectedItems.ts","hooks/useSelectedTree.ts","features/d3-tree/components/Tree/Tree.tsx","features/d3-tree/utils/stratify.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Canvas","props","ref","React","useRef","useState","viewBox","setViewBox","useEffect","current","svg","getBBox","x","y","width","height","autoBox","display","join","children","Cluster","wrapper","selection","select","selectAll","remove","pathWrapper","append","attr","pointsWrapper","textWrapper","dy","tree","root","cluster","nodeSize","data","links","d","selectedItemIds","has","String","target","id","source","descendants","text","labelKey","filter","clone","lower","render","useSearch","items","itemKey","options","search","setSearch","filteredItems","setFilteredItems","doSearch","useCallback","value","caseSensitive","reduce","acc","filteredItem","filteredItemValue","includes","caseSensitiveFilteringService","toLocaleLowerCase","toLowerCase","filteringService","onSearch","useSelectedTree","selectedItems","useSelectedItems","useMemo","selectedNodes","flatMap","selectedItem","type","treeItem","find","getSelectedNodes","Set","node","path","map","getSelectedNodesAndAllTheirParents","Tree","idKey","parentId","parentKey","d3Stratify","onChange","event","currentTarget","folders","name","reports","App","combined","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b9dd2491.chunk.js","sourcesContent":["import React from \"react\";\n\nexport type Props = {\n  height: number;\n  width: number;\n};\nexport const Canvas: React.FC<Props> = (props) => {\n  const ref = React.useRef<SVGSVGElement>(null);\n  const [viewBox, setViewBox] = React.useState([0, 0, 0, 0]);\n  React.useEffect(() => {\n    if (ref.current) {\n      setViewBox(autoBox(ref.current));\n    }\n  }, []);\n  return (\n    <svg\n      ref={ref}\n      display=\"block\"\n      height={props.height}\n      width={props.width}\n      viewBox={viewBox.join(\" \")}\n    >\n      {props.children}\n    </svg>\n  );\n};\n\nfunction autoBox(svg: SVGSVGElement) {\n  const { x, y, width, height } = svg.getBBox();\n  return [x, y, width, height];\n}\n","import React, { PropsWithChildren } from \"react\";\nimport { HierarchyNode } from \"d3\";\n\nimport { render } from \"./Cluster-d3\";\n\nexport type Props<T> = {\n  height: number;\n  labelKey: keyof T;\n  tree: HierarchyNode<T>;\n  selectedItemIds: Set<string>;\n  width: number;\n};\nexport const Cluster = <T,>(props: PropsWithChildren<Props<T>>) => {\n  const ref = React.useRef<SVGGElement>(null);\n\n  React.useEffect(() => {\n    if (ref.current) {\n      render(ref.current, props);\n    }\n  }, [props]);\n  return <g ref={ref} />;\n};\n","import { select, cluster } from \"d3\";\nimport { Props } from \"./Cluster\";\n\nexport const render = <T>(wrapper: SVGGElement, props: Props<T>) => {\n  const selection = select(wrapper);\n  selection.selectAll(\"g\").remove();\n\n  const pathWrapper = selection\n    .append(\"g\")\n    .attr(\"fill\", \"none\")\n    .attr(\"stroke\", \"#555\")\n    .attr(\"stroke-opacity\", 0.4)\n    .attr(\"stroke-width\", 1.5);\n  const pointsWrapper = selection.append(\"g\");\n  const textWrapper = selection.append(\"g\");\n\n  const dx = 50;\n  const dy = props.width / (props.tree.height + 1);\n  const root = cluster<T>().nodeSize([dx, dy])(props.tree);\n\n  pathWrapper\n    .selectAll(\"path\")\n    .data(root.links())\n    .join(\"path\")\n    .attr(\"stroke\", (d) => {\n      if (props.selectedItemIds.has(String(d.target.id))) {\n        return \"red\";\n      } else {\n        return \"#555\";\n      }\n    })\n    .attr(\n      \"d\",\n      (d) => `\n        M${d.target.y},${d.target.x}\n        C${d.source.y + dy / 2},${d.target.x}\n         ${d.source.y + dy / 2},${d.source.x}\n         ${d.source.y},${d.source.x}\n      `\n    );\n\n  pointsWrapper\n    .selectAll(\"circle\")\n    .data(root.descendants())\n    .join(\"circle\")\n    .attr(\"cx\", (d) => d.y)\n    .attr(\"cy\", (d) => d.x)\n    .attr(\"fill\", (d) => (d.children ? \"#555\" : \"#999\"))\n    .attr(\"r\", 2.5);\n\n  textWrapper\n    .attr(\"font-family\", \"sans-serif\")\n    .attr(\"font-size\", 10)\n    .attr(\"stroke-linejoin\", \"round\")\n    .attr(\"stroke-width\", 3)\n    .selectAll(\"text\")\n    .data(root.descendants())\n    .join(\"text\")\n    .attr(\"x\", (d) => d.y)\n    .attr(\"y\", (d) => d.x)\n    .attr(\"dy\", \"0.31em\")\n    .attr(\"dx\", (d) => (d.children ? -6 : 6))\n    .attr(\"fill\", (d) =>\n      // d.id && -> because d3 type is id?: string;\n      d.id && props.selectedItemIds.has(d.id) ? \"red\" : \"black\"\n    )\n    .text((d) => String(d.data[props.labelKey]))\n    .filter((d) => !!d.children)\n    .attr(\"text-anchor\", \"end\")\n    .clone(true)\n    .lower()\n    .attr(\"stroke\", \"white\");\n};\n","import React from \"react\";\n\nexport type Props<T> = {\n  items: T[];\n  itemKey: keyof T;\n  options?: { caseSensitive: boolean };\n};\nexport type ReturnType<T> = {\n  filteredItems: T[];\n  onSearch: (value: string) => void;\n  search: string;\n};\nexport const initialState = {\n  filteredItems: [],\n  onSearch: () => {\n    throw new Error(\"Implement onSearch\");\n  },\n  search: \"\",\n};\nexport default function useSearch<T>({\n  items,\n  itemKey,\n  options,\n}: Props<T>): ReturnType<T> {\n  const [search, setSearch] = React.useState(\"\");\n  const [filteredItems, setFilteredItems] = React.useState(items);\n\n  const doSearch = React.useCallback(\n    (value: string): T[] =>\n      options && options.caseSensitive === true\n        ? caseSensitiveFilteringService(items, itemKey, value)\n        : filteringService(items, itemKey, value),\n    [items, itemKey, options]\n  );\n\n  React.useEffect(() => {\n    setFilteredItems(doSearch(search));\n  }, [items, search, doSearch]);\n\n  const resetSearch = (): void => {\n    // setFilteredItems(items);\n    setSearch(\"\");\n  };\n\n  const onSearch = (value: string): void => {\n    if (value === \"\") return resetSearch();\n    // We are not setting filteredItems here on purpose. Setting only search string ends up in the effect\n    // few lines above.\n    // If hook receives new items we want to maintain the search and do it for the new items. This is\n    // why we have the effect and why it's not necessary the filter items in this function or in resetSearch\n    // setFilteredItems(doSearch(value));\n    setSearch(value);\n  };\n\n  return { search, filteredItems, onSearch };\n}\n\nfunction filteringService<T>(items: T[], itemKey: keyof T, value: string) {\n  return items.reduce<T[]>((acc, filteredItem) => {\n    const filteredItemValue = filteredItem[itemKey];\n    if (\n      typeof filteredItemValue === \"string\" &&\n      filteredItemValue.toLocaleLowerCase().includes(value.toLowerCase())\n    ) {\n      return [...acc, filteredItem];\n    } else {\n      return acc;\n    }\n  }, []);\n}\n\nfunction caseSensitiveFilteringService<T>(\n  items: T[],\n  itemKey: keyof T,\n  value: string\n) {\n  return items.reduce<T[]>((acc, filteredItem) => {\n    const filteredItemValue = filteredItem[itemKey];\n    if (\n      typeof filteredItemValue === \"string\" &&\n      filteredItemValue.includes(value)\n    ) {\n      return [...acc, filteredItem];\n    } else {\n      return acc;\n    }\n  }, []);\n}\n","import useSearch, { Props, ReturnType as SearchReturnType } from \"./useSearch\";\n\nexport type { Props };\nexport type ReturnType<T> = {\n  search: SearchReturnType<T>[\"search\"];\n  onSearch: SearchReturnType<T>[\"onSearch\"];\n  selectedItems: T[];\n};\nexport const useSelectedItems = <T>(props: Props<T>): ReturnType<T> => {\n  const search = useSearch(props);\n\n  return {\n    search: search.search,\n    onSearch: search.onSearch,\n    selectedItems: search.search === \"\" ? [] : search.filteredItems,\n  };\n};\n","import React from \"react\";\nimport { HierarchyNode } from \"d3\";\n\nimport {\n  Props as UseSelectedItemsProps,\n  ReturnType as UseSelectedItemsReturnType,\n  useSelectedItems,\n} from \"./useSelectedItems\";\nimport { BaseItem } from \"../features/d3-tree/types\";\n\ntype Props<T> = {\n  items: UseSelectedItemsProps<T>[\"items\"];\n  itemKey: UseSelectedItemsProps<T>[\"itemKey\"];\n  tree: HierarchyNode<T>;\n};\n\ntype ReturnType<T> = {\n  search: UseSelectedItemsReturnType<T>[\"search\"];\n  onSearch: UseSelectedItemsReturnType<T>[\"onSearch\"];\n  selectedItemIds: Set<string>;\n};\nexport const useSelectedTree = <T extends BaseItem>(\n  props: Props<T>\n): ReturnType<T> => {\n  const { selectedItems, search, onSearch } = useSelectedItems<T>({\n    items: props.items,\n    itemKey: props.itemKey,\n  });\n\n  const selectedItemIds = React.useMemo(() => {\n    const selectedNodes = getSelectedNodes(selectedItems, props.tree);\n    return getSelectedNodesAndAllTheirParents(props.tree, selectedNodes);\n  }, [props.tree, selectedItems]);\n\n  return {\n    search,\n    onSearch,\n    selectedItemIds,\n  };\n};\n\nfunction getSelectedNodes<T extends BaseItem>(\n  selectedItems: T[],\n  tree: HierarchyNode<T>\n): HierarchyNode<T>[] {\n  return selectedItems.flatMap((selectedItem) => {\n    // TODO It would be better to abstract folders and reports out from this and use more generic\n    // terms for node's which don't have children and which do.\n    // I think d3 uses \"leaf node\" and \"node\" respectively\n    if (selectedItem.type === \"folder\") {\n      //@ts-ignore missing from types\n      const treeItem = tree.find((d) => d.id === String(selectedItem.id));\n      return treeItem ? treeItem.children : [];\n    } else {\n      //@ts-ignore missing from types\n      return [tree.find((d) => d.id === String(selectedItem.id))];\n    }\n  });\n}\n\nfunction getSelectedNodesAndAllTheirParents<T extends BaseItem>(\n  tree: HierarchyNode<T>,\n  selectedNodes: HierarchyNode<T>[]\n): Set<string> {\n  // String(node.id) because of d3 type is id?: string; but we always have id\n  return new Set(\n    selectedNodes\n      .flatMap((node) => {\n        return tree.path(node);\n      })\n      .map((node) => String(node.id))\n  );\n}\n","import React, { PropsWithChildren } from \"react\";\n\nimport { BaseItem } from \"../../types\";\nimport { Canvas } from \"../Canvas\";\nimport { Cluster } from \"../Cluster\";\nimport { stratify } from \"../../utils/stratify\";\nimport { useSelectedTree } from \"../../../../hooks/useSelectedTree\";\n\nexport type Props<T> = {\n  height: number;\n  idKey: keyof T;\n  items: T[];\n  labelKey: keyof T;\n  parentKey: keyof T;\n  width: number;\n};\nexport const Tree = <T extends BaseItem>(\n  props: PropsWithChildren<Props<T>>\n) => {\n  // In our app all d3 related stuff could be completely inside the useSelectedTree hook\n  // I have them here because Cluster takes tree as props\n  const tree = React.useMemo(\n    () => stratify(props.items, props.idKey, props.parentKey),\n    [props.items, props.idKey, props.parentKey]\n  );\n  const { search, onSearch, selectedItemIds } = useSelectedTree({\n    items: props.items,\n    itemKey: props.labelKey,\n    tree,\n  });\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={search}\n        onChange={(event) => {\n          const value = event.currentTarget.value;\n          onSearch(value);\n        }}\n      />\n      <Canvas height={props.height} width={props.width}>\n        <Cluster\n          height={props.height}\n          labelKey={props.labelKey}\n          tree={tree}\n          selectedItemIds={selectedItemIds}\n          width={props.width}\n        />\n      </Canvas>\n    </div>\n  );\n};\n","import { stratify as d3Stratify } from \"d3\";\n\nexport const stratify = <T>(data: T[], id: keyof T, parentId: keyof T) => {\n  return d3Stratify<T>()\n    .id((d) => String(d[id]))\n    .parentId((d) => {\n      // For some reason null is not acceptable parentId and it that case it should be \"\"\n      // Maybe it has something to do with CSVs since this is supposed to be used for reading CSV data\n      return d[parentId] === null ? \"\" : String(d[parentId]);\n    })(data);\n};\n","import React from \"react\";\n\nimport { Tree } from \"./features/d3-tree\";\n\ninterface BaseType {\n  type: string;\n}\ninterface Folder extends BaseType {\n  id: number;\n  name: string;\n  parentId: number | null;\n  type: \"folder\";\n}\ninterface Report extends BaseType {\n  id: number;\n  name: string;\n  parentId: number | null;\n  type: \"report\";\n}\n\nconst folders: Folder[] = [\n  { id: 1, name: \"Root\", parentId: null, type: \"folder\" },\n  { id: 2, name: \"Cats\", parentId: 1, type: \"folder\" },\n  { id: 3, name: \"Dogs\", parentId: 1, type: \"folder\" },\n  { id: 4, name: \"Small\", parentId: 2, type: \"folder\" },\n  { id: 5, name: \"Big\", parentId: 2, type: \"folder\" },\n];\n\nconst reports: Report[] = [\n  { id: 10, name: \"Kitten\", parentId: 4, type: \"report\" },\n  { id: 20, name: \"Kitten2\", parentId: 4, type: \"report\" },\n  { id: 30, name: \"Buldog\", parentId: 3, type: \"report\" },\n  { id: 40, name: \"Under root\", parentId: 1, type: \"report\" },\n  { id: 50, name: \"Fatcat\", parentId: 5, type: \"report\" },\n];\n\nfunction App() {\n  const combined: Array<Report | Folder> = [...folders, ...reports];\n  return (\n    <div>\n      <Tree\n        height={800}\n        idKey=\"id\"\n        items={combined}\n        labelKey=\"name\"\n        parentKey=\"parentId\"\n        width={800}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}